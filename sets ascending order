#include <iostream>
#include <set> // provides the std::set container
// templatise the function below
bool fncomp (int lhs, int rhs) {
  return lhs<rhs;
}
// templatise the struct below
template <typename C>
struct classcomp {
    
  bool operator() (const C& lhs, const C& rhs) const//operator overloading for bool operator; )const ensures that you dont modify anything within that variable class
  {
    return lhs > rhs;
  }
};
//!NOTE: Should work with templatised fncomp, classcomp
void ExampleOfUsingClassComp(){
  classcomp<int> cc; // explicit object 'cc' only works with integers since 4 is not less than 2 it'll give 0 (false in computer language) if you put 2<4,it'll give 1 for true
  std::cout << "classcomp(4, 2) = " << cc(4, 2) << std::endl;
  // The call below also works by creating a temporary object
  std::cout << "classcomp<double>()(2.253, 2.255) = "
            <<  classcomp<double>()(2.253, 2.255)
            << std::endl;
  std::cout << "classcomp<char>()('@', 'A') = "
            <<  classcomp<char>()('@', 'A')// you can use classcomp with char and double above beacuse its a template
            << std::endl;
}
int main ()
{
  // Once you templatise the struct,
  // the function call below should work
  ExampleOfUsingClassComp();

  std::set<int> first; // empty set of ints; set is also templatised therefore you us the angle brackets

  int myints[]= {50,40,30,10,20,30,40,50,30,40,50,30,40,50,10,30,40};// no duplicates will be picked, only the unique ones will bw chosen eg. id number, finger prints, bank account numbers etc
  std::set<int> second (myints,myints + sizeof(myints)/sizeof(int)); // range; the name of the array is a pointer, points to the very first array (after 20)
  std::set<int>::const_iterator se = second.begin();
  for(int i = 0; se != second.end(); ++se)
        std::cout << "second[" << i++ <<"]=\t"
                    << (*se) << std::endl;
  //!NOTE: uses 'copy constructor' to create 'third' from
  //       'second'.
  std::set<int> third (second);//multiset prints everything, even the duplicates and arranges them from ascending to descending order
  //!NOTE: uses constructor that takes iterators to create
  //       'fourth' from 'second';
  std::set<int> fourth (second.begin(), second.end());
  //!NOTE: making classcomp the Compare object
  std::set<int,classcomp<int>> fifth;
  //!NOTE: making use of a function pointer as Compare object
  bool(*fn_pt)(int,int) = fncomp;
  std::set<int,bool(*)(int,int)> sixth (fn_pt);
  return 0;
}
